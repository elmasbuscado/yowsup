#!/usr/bin/env python
__version__ = "2.0.15"
__author__ = "Tarek Galal"

import sys, argparse, yowsup, logging
from yowsup.env import YowsupEnv
from yowsup.config.manager import ConfigManager

from yowsup.config.v1.config import Config


HELP_CONFIG = """
############# Yowsup Configuration Sample ###########
#
# ====================
# The file contains info about your WhatsApp account. This is used during registration and login.
# You can define or override all fields in the command line args as well.
#
# Country code. See http://www.ipipi.com/help/telephone-country-codes.htm. This is now required.
cc=49
#
# Your full phone number including the country code you defined in 'cc', without preceding '+' or '00'
phone=491234567890
#
# You obtain this password when you register using Yowsup.
password=NDkxNTIyNTI1NjAyMkBzLndoYXRzYXBwLm5ldA==
#######################################################
"""


CR_TEXT = """yowsup-cli  v{cliVersion}
yowsup      v{yowsupVersion}

Copyright (c) 2012-2016 Tarek Galal
http://www.openwhatsapp.org

This software is provided free of charge. Copying and redistribution is
encouraged.

If you appreciate this software and you would like to support future
development please consider donating:
http://openwhatsapp.org/yowsup/donate

"""

from yowsup import logger as yowlogger, formatter

logger = logging.getLogger('yowsup-cli')
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)

# add formatter to ch
ch.setFormatter(formatter)

# add ch to logger
logger.addHandler(ch)


class YowArgParser(argparse.ArgumentParser):
    def __init__(self, *args, **kwargs):
        super(YowArgParser, self).__init__(*args, **kwargs)
        self._config_manager = ConfigManager()
        self.add_argument("-v", "--version",
            action="store_true",
            help="Print version info and exit"
        )

        self.add_argument("-d", "--debug",
            action = "store_true",
            help = "Show debug messages"
        )

        self.add_argument("--help-config", help = "Prints a config file sample", action = "store_true")

        config_group = self.add_argument_group(
            "Configuration options",
            description="Only some of the configuration parameters are required depending on the action being "
                        "performed using yowsup"
        )
        config_group.add_argument(
            "-c", '--config',
            metavar="path",
            action="store",
            help="(optional) Path to config file. Other configuration arguments have higher priority if given, and "
                 "will override those specified in the config file."
        )
        config_group.add_argument(
            '--config-env',
             action = "store",
             help = "Set the environment yowsup simulates",
             choices = YowsupEnv.getRegisteredEnvs()
        )
        config_group.add_argument(
            '--config-mcc',
             action = "store",
             help = "Mobile Country Code. Check your mcc here: https://en.wikipedia.org/wiki/Mobile_country_code"
        )
        config_group.add_argument(
            '--config-mnc',
             action = "store",
             help = "Mobile Network Code. Check your mnc from https://en.wikipedia.org/wiki/Mobile_country_code"
        )
        config_group.add_argument(
            '--config-sim-mcc',
            action = "store",
            help = "Mobile Country Code. Check your mcc here: https://en.wikipedia.org/wiki/Mobile_country_code"
        )
        config_group.add_argument(
            '--config-sim-mnc',
            action = "store",
            help = "Mobile Network Code. Check your mnc from https://en.wikipedia.org/wiki/Mobile_country_code"
        )
        config_group.add_argument(
            '--config-phone',
             action= "store",
             help = " Your full phone number including the country code you defined in 'cc',"
                    " without preceeding '+' or '00'"
        )
        config_group.add_argument(
            '--config-cc',
             action = "store",
             help = "Country code. See http://www.ipipi.com/networkList.do. This is now required"
        )
        config_group.add_argument(
            '--config-password',
            action= "store",
            help = "Base64 encoded password for the specified phone number"
        )
        self.args = {}
        self._config = None

    def getArgs(self):
        return self.parse_args()

    def process(self):
        self.args = vars(self.parse_args())

        if self.args["debug"]:
            logger.setLevel(logging.DEBUG)
            yowlogger.setLevel(level = logging.DEBUG)
        else:
            logger.setLevel(logging.INFO)
            yowlogger.setLevel(level = logging.INFO)

        config_phone = self.args["config_phone"]

        if self.args["config"]:
            self._config = self._config_manager.load_path(self.args["config"])
        elif config_phone:
            self._config = self._config_manager.load(config_phone)
        else:
            raise ValueError("Must specify either --config or --config-phone")

        if self._config is None:
            self._config = Config()

        if config_phone is not None:
            self._config.phone = config_phone

        if self.args["config_cc"]:
            self._config.cc = self.args["config_cc"]

        if self.args["config_mcc"]:
            self._config.mcc = self.args["config_mcc"]

        if self.args["config_mnc"]:
            self._config.mnc = self.args["config_mnc"]

        if self.args["config_sim_mcc"]:
            self._config.sim_mcc = self.args["config_sim_mcc"]

        if self.args["config_sim_mnc"]:
            self._config.sim_mnc = self.args["config_sim_mnc"]

        if self.args["config_env"]:
            YowsupEnv.setEnv(self.args["config_env"])

        if self.args["version"]:
            print("yowsup-cli v%s\nUsing yowsup v%s" % (__version__, yowsup.__version__))
            sys.exit(0)

        if self.args["help_config"]:
            print(HELP_CONFIG)
            sys.exit(0)

    def printInfoText(self):
        print(CR_TEXT.format(cliVersion=__version__, yowsupVersion=yowsup.__version__))


class ConfigArgParser(YowArgParser):
    def __init__(self, *args, **kwargs):
        super(ConfigArgParser, self).__init__(*args, **kwargs)
        self.description = "Yowsup configuration actions"

        gp = self.add_argument_group("Yowsup Config Actions")
        exgp = gp.add_mutually_exclusive_group()

        exgp.add_argument("-p", '--preview-config', help='Preview yowsup config', action="store", choices=("json", "keyval"), required=False)
        exgp.add_argument("-w", '--write', help='Write configuration', action="store_true", required=False)

    def process(self):
        super(ConfigArgParser, self).process()
        preview_format =  self.args["preview_config"]
        if preview_format == "json":
            print(self._config_manager.config_to_str(self._config, ConfigManager.TYPE_JSON))
        elif preview_format == "keyval":
            print(self._config_manager.config_to_str(self._config, ConfigManager.TYPE_KEYVAL))
        elif preview_format == None:
            pass

        return True


class RegistrationArgParser(YowArgParser):
    def __init__(self, *args, **kwargs):
        super(RegistrationArgParser, self).__init__(*args, **kwargs)
        self.description = "WhatsApp Registration options"

        self.add_argument('-p', '--preview', action="store_true", help="Preview requests only, will not attempt to connect and send")

        regSteps = self.add_argument_group("Modes")
        regSteps = regSteps.add_mutually_exclusive_group()

        regSteps.add_argument("-r", '--requestcode', help='Request the digit registration code from Whatsapp.', action="store", required=False, metavar="(sms|voice)")
        regSteps.add_argument("-R", '--register', help='Register account on Whatsapp using the code you previously received', action="store", required=False, metavar="code")
        self._preview = False

    def process(self):
        super(RegistrationArgParser, self).process()

        config = self._config
        self._preview = self.args["preview"]

        if not "mcc"     in config: config["mcc"] = "000"
        if not "mnc"     in config: config["mnc"] = "000"
        if not "sim_mcc" in config: config["sim_mcc"] = "000"
        if not "sim_mnc" in config: config["sim_mnc"] = "000"

        try:
            assert self.args["requestcode"] or self.args["register"], "Must specify one of the modes -r/-R"
            assert "cc"      in config, "Must specify cc (country code)"
            assert "phone"   in config, "Must specify phone number"
        except AssertionError as e:
            print(e)
            print("\n")
            return False

        if not str(config.phone).startswith(str(config.cc)):
            print("Error, phone number does not start with the specified country code\n")
            return False

        if self.args["requestcode"]:
            self.handleRequestCode(self.args["requestcode"], config)
        elif self.args["register"]:
            self.handleRegister(self.args["register"], config)
        else:
            return False

        return True

    def handleRequestCode(self, method, config):
        from yowsup.registration import WACodeRequest
        self.printInfoText()
        codeReq = WACodeRequest(method, config)
        result = codeReq.send(preview=self._preview)
        if not self._preview:
            print(self.resultToString(result))

    def handleRegister(self, code, config):
        from yowsup.registration import WARegRequest
        self.printInfoText()
        code = code.replace('-', '')
        req = WARegRequest(config, code)
        result = req.send(preview=self._preview)
        if not self._preview:
            print(self.resultToString(result))

    def resultToString(self, result):
        unistr = str if sys.version_info >= (3, 0) else unicode
        out = []
        for k, v in result.items():
            if v is None:
                continue
            out.append("%s: %s" %(k, v.encode("utf-8") if type(v) is unistr else v))

        return "\n".join(out)

class DemosArgParser(YowArgParser):
    def __init__(self, *args, **kwargs):
        super(DemosArgParser, self).__init__(*args, **kwargs)
        self.description = "Run a yowsup demo"


        cmdopts = self.add_argument_group("Command line interface demo")
        cmdopts.add_argument('-y', '--yowsup', action = "store_true", help = "Start the Yowsup command line client")

        echoOpts = self.add_argument_group("Echo client demo")
        echoOpts.add_argument('-e', '--echo', action = "store_true", help = "Start the Yowsup Echo client")

        sendOpts = self.add_argument_group("Send client demo")
        sendOpts.add_argument('-s', '--send', action="store", help = "Send a message to specified phone number, "
                                                                     "wait for server receipt and exit",
                              metavar=("phone", "message"), nargs = 2)
        syncContacts = self.add_argument_group("Sync contacts")
        syncContacts.add_argument('-S','--sync', action = "store" , help = "Sync ( check valid ) whatsapp contacts",metavar =("contacts"))

    def process(self):
        super(DemosArgParser, self).process()

        if self.args["yowsup"]:
            self.startCmdline()
        elif self.args["echo"]:
            self.startEcho()
        elif self.args["send"]:
            self.startSendClient()
        elif self.args["sync"]:
            self.startSyncContacts()
        else:
            return False
        return True

    def startCmdline(self):
        logger.debug("starting cmd")
        from yowsup.demos import cli
        credentials = self._config.phone, self._config.password
        if not credentials:
            print("Error: You must specify a configuration method")
            sys.exit(1)
        self.printInfoText()
        stack = cli.YowsupCliStack(credentials)
        stack.start()

    def startEcho(self):
        from yowsup.demos import echoclient
        credentials = self._config.phone, self._config.password
        if not credentials:
            print("Error: You must specify a configuration method")
            sys.exit(1)
        try:
            self.printInfoText()
            stack = echoclient.YowsupEchoStack(credentials, not self.args["unmoxie"])
            stack.start()
        except KeyboardInterrupt:
            print("\nYowsdown")
            sys.exit(0)

    def startSendClient(self):
        from yowsup.demos import sendclient
        credentials = self._config.phone, self._config.password
        if not credentials:
            print("Error: You must specify a configuration method")
            sys.exit(1)

        try:
            self.printInfoText()
            stack = sendclient.YowsupSendStack(credentials, [([self.args["send"][0], self.args["send"][1]])],
                                               not self.args["unmoxie"])
            stack.start()
        except KeyboardInterrupt:
            print("\nYowsdown")
            sys.exit(0)

    def startSyncContacts(self):
        from yowsup.demos import contacts
        credentials = self._config.phone, self._config.password
        if not credentials:
            print("Error: You must specify a configuration method")
            sys.exit(1)
        try:
            self.printInfoText()
            stack = contacts.YowsupSyncStack(credentials,self.args["sync"].split(','), not self.args["unmoxie"])
            stack.start()
        except KeyboardInterrupt:
            print("\nYowsdown")
            sys.exit(0)


if __name__ == "__main__":
    args = sys.argv
    if(len(args) > 1):
        del args[0]


    modeDict = {
        "demos":        DemosArgParser,
        "registration": RegistrationArgParser,
        "config": ConfigArgParser,
        "version":      None
    }

    if(len(args) == 0 or args[0] not in modeDict):
        print("Available commands:\n===================")
        print(", ".join(modeDict.keys()))

        sys.exit(1)

    mode = args[0]
    if mode == "version":
        print("yowsup-cli v%s\nUsing yowsup v%s" % (__version__, yowsup.__version__))
        sys.exit(0)
    else:
        parser = modeDict[mode]()
        if not parser.process():
            parser.print_help()
